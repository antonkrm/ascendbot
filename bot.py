import os
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from openai import OpenAI
from astro_engine import AstroCalculator

import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

load_dotenv()

class Config:
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
    MODEL_NAME = "deepseek/deepseek-r1-0528:free"
    MAX_TOKENS = 2000

class AstroStates(StatesGroup):
    waiting_birth_date = State()
    waiting_birth_time = State()
    waiting_birth_place = State()

bot = Bot(token=Config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
astro = AstroCalculator()

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=Config.OPENROUTER_API_KEY,
)

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

async def send_safe_message(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–ª–∏–Ω—ã"""
    if len(text) <= 4096:
        await bot.send_message(chat_id, text, parse_mode="Markdown")
    else:
        parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        for part in parts:
            await bot.send_message(chat_id, part, parse_mode="Markdown")
            await asyncio.sleep(0.3)

async def get_ai_response(prompt: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò"""
    try:
        completion = client.chat.completions.create(
            model=Config.MODEL_NAME,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=Config.MAX_TOKENS
        )
        return completion.choices[0].message.content
    except Exception as e:
        logger.error(f"AI error: {str(e)}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üîÆ *AscendBot* - —Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )

@dp.message(Command("natal"))
@dp.message(lambda message: message.text == "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")
async def start_natal_chart(message: Message, state: FSMContext):
    await state.set_state(AstroStates.waiting_birth_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ü—Ä–∏–º–µ—Ä: _15.05.1990_",
        parse_mode="Markdown"
    )

@dp.message(AstroStates.waiting_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(birth_date=message.text)
        await state.set_state(AstroStates.waiting_birth_time)
        await message.answer(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è* –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä: _14:30_",
            parse_mode="Markdown"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
            parse_mode="Markdown"
        )

@dp.message(AstroStates.waiting_birth_time)
async def process_birth_time(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
        await state.update_data(birth_time=message.text)
        await state.set_state(AstroStates.waiting_birth_place)
        await message.answer(
            "üåç –í–≤–µ–¥–∏—Ç–µ *–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è* (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞)\n"
            "–ü—Ä–∏–º–µ—Ä: _–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è_",
            parse_mode="Markdown"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú",
            parse_mode="Markdown"
        )

@dp.message(AstroStates.waiting_birth_place)
async def process_birth_place(message: Message, state: FSMContext):
    user_data = await state.get_data()
    place = message.text.strip()
    
    try:
        # 1. –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –ø–ª–∞–Ω–µ—Ç
        positions = astro.calculate(
            user_data['birth_date'],
            user_data['birth_time'],
            place
        )
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò
        prompt = f"""
–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:
- –î–∞—Ç–∞: {user_data['birth_date']}
- –í—Ä–µ–º—è: {user_data['birth_time']}
- –ú–µ—Å—Ç–æ: {place}

–ü–æ–∑–∏—Ü–∏–∏:
- –°–æ–ª–Ω—Ü–µ: {positions['planets']['sun']['sign']} ({positions['planets']['sun']['degree']:.1f}¬∞)
- –õ—É–Ω–∞: {positions['planets']['moon']['sign']} ({positions['planets']['moon']['degree']:.1f}¬∞)
- –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç: {positions['planets']['ascendant']['sign']} ({positions['planets']['ascendant']['degree']:.1f}¬∞)

–î–∞–π –∫—Ä–∞—Ç–∫—É—é, –ª–∞–∫–æ–Ω–∏—á–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞:
- –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã (–¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤, –∫—Ä–∞—Ç–∫–æ)
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–æ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤)
- 3 —Å–æ–≤–µ—Ç–∞ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫—Ä–∞—Å–∏–≤–æ, —Å —ç–º–æ–¥–∑–∏ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. –ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤. –ù–µ –ø–∏—à–∏ '–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...'
"""
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        interpretation = await get_ai_response(prompt)
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"üå† *–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è {user_data['birth_date']}*\n"
            f"üìç –ú–µ—Å—Ç–æ: {place}\n\n"
            f"‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ: {positions['planets']['sun']['sign']} ({positions['planets']['sun']['degree']:.1f}¬∞)\n"
            f"üåô –õ—É–Ω–∞: {positions['planets']['moon']['sign']} ({positions['planets']['moon']['degree']:.1f}¬∞)\n"
            f"‚Üë –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç: {positions['planets']['ascendant']['sign']} ({positions['planets']['ascendant']['degree']:.1f}¬∞)\n\n"
            f"{interpretation}"
        )
        
        await send_safe_message(message.chat.id, response)
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logger.error(f"Natal chart error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö")
    finally:
        await state.clear()

if __name__ == '__main__':
    logger.info("Starting AstroBot...")
    dp.run_polling(bot)